# -*- coding: utf-8 -*-
"""sesi04 _newton_raphson - 2702221936 - Jeffrey Ferdinand Hartono.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZE4fb20bHoDYaHZBbqFIy_LgpLnkLSyw
"""

import numpy as np

f = lambda x: x**2 - 2
f_prime = lambda x: 2*x
newton_raphson = 1.4 - (f(1.4))/(f_prime(1.4))

print("newton_raphson =", newton_raphson)
print("sqrt(2) =", np.sqrt(2))

def my_newton(f, df, x0, tol):
  # output is an estimation of the root of f
  # using the Newton Raphson method
  # recursive implementation
  if abs(f(x0)) < tol:
    return x0
  else:
    return my_newton(f, df, x0 - f(x0)/df(x0), tol)

estimate = my_newton(f, f_prime, 1.5, 1e-6)
print("estimate =", estimate)
print("sqrt(2) =", np.sqrt(2))

"""Quiz 1 Newton Raphson

f(x) = x^3 - 3x^2 + 2x
x0 = 1.5
tol = 0.01
"""

f = lambda x: x**3 - 3 * x**2 + 2 * x
f_prime = lambda x: 3 * x**2 - 6 * x + 2
x0 = 1.5
tol = 0.01

print(my_newton(f, f_prime, x0, tol))

"""Quiz 2 Newton Raphson

f(x) = e^x - 2x
x0 = 1
tol = 0.001
"""

f = lambda x: np.e**x - 2 * x
f_prime = lambda x: np.e**x - 2
x0 = 1
tol = 0.001

print(my_newton(f, f_prime, x0, tol))

newton_raphson = 1 - (f(1))/(f_prime(1))

print("newton_raphson =", newton_raphson)